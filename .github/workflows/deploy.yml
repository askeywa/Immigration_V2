name: Deploy to EC2

on:
  push:
    branches: [ master, production ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: Install System Dependencies for Native Modules
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-pip libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
      
      - name: Cache Backend Build
        uses: actions/cache@v4
        with:
          path: |
            backend/dist
            backend/node_modules/.cache
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json', 'backend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-backend-
            ${{ runner.os }}-
      
      - name: Cache Frontend Build
        uses: actions/cache@v4
        with:
          path: |
            frontend/dist
            frontend/node_modules/.cache
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json', 'frontend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
            ${{ runner.os }}-
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --legacy-peer-deps
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps
      
      - name: Run Backend Tests
        run: |
          cd backend
          if npm run test --if-present; then
            echo "✅ Backend tests passed"
          else
            echo "⚠️ Backend tests not configured, skipping"
          fi
      
      - name: Run Frontend Tests
        run: |
          cd frontend
          if npm run test --if-present; then
            echo "✅ Frontend tests passed"
          else
            echo "⚠️ Frontend tests not configured, skipping"
          fi
      
      - name: Run Linting
        run: |
          echo "🔍 Running linting checks..."
          
          # Backend linting
          echo "Linting backend..."
          cd backend
          if npm run lint --if-present; then
            echo "✅ Backend linting passed"
          else
            echo "⚠️ Backend linting failed or not configured"
          fi
          
          # Frontend linting
          echo "Linting frontend..."
          cd ../frontend
          if npm run lint --if-present; then
            echo "✅ Frontend linting passed"
          else
            echo "⚠️ Frontend linting failed or not configured"
          fi
          
          echo "🔍 Linting checks completed"
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Required Secrets
        run: |
          echo "🔍 Validating required secrets..."
          required_secrets=(
            "MONGODB_URI"
            "JWT_SECRET"
            "JWT_REFRESH_SECRET"
            "EC2_SSH_KEY"
            "EC2_HOST"
            "EC2_USER"
            "REDIS_PASSWORD"
            "FRONTEND_URL"
            "API_BASE_URL"
            "MAIN_DOMAIN"
            "ENCRYPTION_KEY"
          )
          
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "❌ Missing required secrets:"
            printf '%s\n' "${missing_secrets[@]}"
            exit 1
          fi
          
          echo "✅ All required secrets are present"
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      
      - name: Create Production Environment File
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          NODE_ENV: ${{ secrets.NODE_ENV || 'production' }}
          REDIS_CLUSTER_MODE: ${{ secrets.REDIS_CLUSTER_MODE || 'false' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE: ${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED: ${{ secrets.NEW_RELIC_ENABLED }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.ALLOW_START_WITHOUT_DB }}
          ALLOWED_SUPER_ADMIN_DOMAINS: ${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        run: |
          cat > env.production << 'EOF'
          NODE_ENV=${{ secrets.NODE_ENV || 'production' }}
          PORT=5000
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${{ secrets.SUPER_ADMIN_DOMAIN }}
          ALLOWED_SUPER_ADMIN_DOMAINS=${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
          
          # Database
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          
          # Domain Configuration
          MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX=${{ secrets.TENANT_DOMAIN_PREFIX }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Redis
          REDIS_ENABLED=${{ secrets.REDIS_ENABLED }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_CLUSTER_MODE=${{ secrets.REDIS_CLUSTER_MODE || 'false' }}
          
          # Sentry
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE=${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE=${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE=${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          
          # New Relic
          NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED=${{ secrets.NEW_RELIC_ENABLED }}
          
          # EC2 Configuration
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP=${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS=${{ secrets.EC2_PUBLIC_DNS }}
          
          # API Configuration
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          
          # App Configuration
          APP_NAME=${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB=${{ secrets.ALLOW_START_WITHOUT_DB }}
          
          # Encryption
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
          EOF
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy environment file FIRST (before deployment)
          echo "Copying environment file..."
          scp -i private_key.pem -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null env.production ${USER}@${HOST}:/tmp/env.production
          
          # Deploy application
          ssh -i private_key.pem -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null ${USER}@${HOST} << ENDSSH
            set -e  # Exit on any error
            set -x  # Enable debug mode to show commands
            
            # Disable clear_console to prevent it from hiding error messages
            alias clear_console='echo "clear_console disabled to preserve error messages"'
            
            # Set environment variables in the SSH session
            export MAIN_DOMAIN="${{ secrets.MAIN_DOMAIN }}"
            export SUPER_ADMIN_DOMAIN="${{ secrets.SUPER_ADMIN_DOMAIN }}"
            export ALLOWED_SUPER_ADMIN_DOMAINS="${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}"
            export ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS }}"
            
            echo "=== ENVIRONMENT VARIABLES SET ==="
            echo "MAIN_DOMAIN: \$MAIN_DOMAIN"
            echo "SUPER_ADMIN_DOMAIN: \$SUPER_ADMIN_DOMAIN"
            
            echo "=== INSTALLING SYSTEM DEPENDENCIES ==="
            # Install build tools required for native npm modules
            sudo apt-get update
            sudo apt-get install -y \
              build-essential \
              python3 \
              python3-pip \
              make \
              g++ \
              gcc \
              libcairo2-dev \
              libpango1.0-dev \
              libjpeg-dev \
              libgif-dev \
              librsvg2-dev \
              chromium-browser \
              chromium-chromedriver
            
            echo "=== CLEANING EXISTING DEPLOYMENT ==="
            sudo rm -rf /var/www/immigration-portal/*
            sudo rm -rf /var/www/immigration-portal/.git
            sudo rm -rf /var/www/immigration-portal/.[^.]*
            
            echo "=== CLONING REPOSITORY ==="
            cd /var/www/immigration-portal
            git clone https://github.com/askeywa/Immigration_V2.git .
            
            echo "=== SETTING UP ENVIRONMENT ==="
            # Move env file to correct location (after git clone)
            mv /tmp/env.production /var/www/immigration-portal/backend/.env
            chmod 600 /var/www/immigration-portal/backend/.env
            
            # Set proper ownership
            sudo chown -R ubuntu:ubuntu /var/www/immigration-portal
            
            echo "=== INSTALLING DEPENDENCIES ==="
            echo "Installing backend dependencies..."
            cd /var/www/immigration-portal/backend
            
            # Clean npm cache to avoid corruption issues
            npm cache clean --force
            
            # Remove any existing node_modules and package-lock
            rm -rf node_modules package-lock.json
            
            # Install with legacy peer deps to avoid conflicts
            npm install --legacy-peer-deps
            
            echo "Installing frontend dependencies..."
            cd /var/www/immigration-portal/frontend
            
            # Clean npm cache
            npm cache clean --force
            
            # Remove any existing node_modules and package-lock
            rm -rf node_modules package-lock.json
            
            # Install with legacy peer deps
            npm install --legacy-peer-deps
            
            echo "=== BUILDING APPLICATION ==="
            echo "Building backend..."
            cd /var/www/immigration-portal/backend
            rm -rf dist/
            rm -rf node_modules/.cache/
            npm run build
            
            echo "Building frontend..."
            cd /var/www/immigration-portal/frontend
            rm -rf dist/
            rm -rf node_modules/.cache/
            rm -rf .vite/
            npm run build
            
            echo "=== VERIFYING BUILDS ==="
            echo "Verifying frontend build..."
            if [ ! -d "dist" ]; then
              echo "ERROR: Frontend dist directory not found!"
              exit 1
            fi
            if [ ! -f "dist/index.html" ]; then
              echo "ERROR: Frontend dist/index.html not found!"
              exit 1
            fi
            echo "Frontend build verification passed!"
            
            echo "Verifying backend build..."
            cd /var/www/immigration-portal/backend
            if [ ! -f "dist/server.js" ]; then
              echo "ERROR: Backend dist/server.js not found!"
              exit 1
            fi
            echo "Backend build verification passed!"
            
            echo "=== SETTING UP NGINX ==="
            sudo apt update
            sudo apt install nginx -y
            
            
            # Create Nginx configuration using base64 to avoid all shell parsing issues
            echo "=== CREATING NGINX CONFIGURATION (BULLETPROOF METHOD) ==="
            echo 'c2VydmVyIHsKICAgIGxpc3RlbiA4MDsKICAgIHNlcnZlcl9uYW1lIGlidXlzY3JhcC5jYSB3d3cuaWJ1eXNjcmFwLmNhOwogICAgCiAgICAjIFNlcnZlIGZyb250ZW5kIHN0YXRpYyBmaWxlcwogICAgcm9vdCAvdmFyL3d3dy9pbW1pZ3JhdGlvbi1wb3J0YWwvZnJvbnRlbmQvZGlzdDsKICAgIGluZGV4IGluZGV4Lmh0bWw7CiAgICAKICAgICMgSGFuZGxlIGZyb250ZW5kIHJvdXRpbmcgKFNQQSkKICAgIGxvY2F0aW9uIC8gewogICAgICAgIHRyeV9maWxlcyAkdXJpICR1cmkvIC9pbmRleC5odG1sOwogICAgfQogICAgCiAgICAjIFByb3h5IEFQSSByZXF1ZXN0cyB0byBiYWNrZW5kCiAgICBsb2NhdGlvbiAvYXBpLyB7CiAgICAgICAgcHJveHlfcGFzcyBodHRwOi8vbG9jYWxob3N0OjUwMDA7CiAgICAgICAgcHJveHlfaHR0cF92ZXJzaW9uIDEuMTsKICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFVwZ3JhZGUgJGh0dHBfdXBncmFkZTsKICAgICAgICBwcm94eV9zZXRfaGVhZGVyIENvbm5lY3Rpb24gInVwZ3JhZGUiOwogICAgICAgIHByb3h5X3NldF9oZWFkZXIgSG9zdCAkaG9zdDsKICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtUmVhbC1JUCAkcmVtb3RlX2FkZHI7CiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Gb3IgJHByb3h5X2FkZF94X2ZvcndhcmRlZF9mb3I7CiAgICAgICAgcHJveHlfc2V0X2hlYWRlciBYLUZvcndhcmRlZC1Qcm90byAkc2NoZW1lOwogICAgICAgIHByb3h5X2NhY2hlX2J5cGFzcyAkaHR0cF91cGdyYWRlOwogICAgfQp9' | base64 -d | sudo tee /etc/nginx/sites-available/immigration-portal > /dev/null
            
            echo "Configuration created successfully!"
            
            echo "=== VERIFYING NGINX CONFIGURATION ==="
            echo "Configuration file contents (first 10 lines):"
            head -10 /etc/nginx/sites-available/immigration-portal
            
            # Enable the site and remove default
            sudo ln -sf /etc/nginx/sites-available/immigration-portal /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test Nginx configuration
            echo "=== TESTING NGINX CONFIGURATION ==="
            sudo nginx -t
            if [ $? -eq 0 ]; then
              echo "Nginx configuration test passed"
            else
              echo "ERROR: Nginx configuration test failed!"
              exit 1
            fi
            
            # Start and enable Nginx
            echo "=== STARTING NGINX ==="
            echo "Starting nginx service..."
            sudo systemctl start nginx
            if [ $? -eq 0 ]; then
              echo "Nginx started successfully"
            else
              echo "ERROR: Failed to start Nginx"
              sudo systemctl status nginx
              exit 1
            fi
            
            echo "Enabling nginx service..."
            sudo systemctl enable nginx
            
            echo "Reloading nginx configuration..."
            sudo systemctl reload nginx
            if [ $? -eq 0 ]; then
              echo "Nginx reloaded successfully"
            else
              echo "ERROR: Failed to reload Nginx"
              sudo systemctl status nginx
              exit 1
            fi
            
            echo "=== SETTING UP REDIS ==="
            if ! command -v redis-server &> /dev/null; then
              sudo apt install redis-server redis-tools -y
            fi
            
            # Configure Redis with secure password
            sudo sed -i 's/^bind .*/bind 127.0.0.1/' /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory .*/maxmemory 512mb/' /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory-policy .*/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
            
            # Set Redis password securely
            echo "requirepass ${REDIS_PASSWORD}" | sudo tee /tmp/redis_password.conf > /dev/null
            sudo sed -i '/^# *requirepass/d; /^requirepass/d' /etc/redis/redis.conf
            sudo sh -c 'cat /tmp/redis_password.conf >> /etc/redis/redis.conf'
            sudo rm -f /tmp/redis_password.conf
            
            # Restart Redis
            sudo systemctl restart redis-server
            sudo systemctl enable redis-server
            
            if sudo systemctl is-active --quiet redis-server; then
              echo "Redis started successfully"
            else
              echo "ERROR: Redis failed to start"
              exit 1
            fi
            
            echo "=== SETTING UP PM2 ==="
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            # Create logs directory
            mkdir -p /var/www/immigration-portal/backend/logs
            
            echo "=== DEPLOYING APPLICATION ==="
            cd /var/www/immigration-portal/backend
            
            # Verify environment file exists and has content
            if [ ! -f ".env" ]; then
              echo "ERROR: .env file not found!"
              exit 1
            fi
            
            echo "Environment file exists. Checking content..."
            echo "First 10 lines of .env:"
            head -10 .env
            
            # Check if required environment variables are present
            if ! grep -q "MONGODB_URI" .env; then
              echo "ERROR: MONGODB_URI not found in .env file!"
              exit 1
            fi
            
            if ! grep -q "JWT_SECRET" .env; then
              echo "ERROR: JWT_SECRET not found in .env file!"
              exit 1
            fi
            
            echo "Environment file validation passed!"
            
            # CRITICAL FIX: Kill any existing Node processes on port 5000
            echo "=== CLEANING UP PORT 5000 ==="
            sudo lsof -ti:5000 | xargs sudo kill -9 2>/dev/null || true
            sleep 2
            
            # Stop existing PM2 processes
            pm2 stop immigration-portal 2>/dev/null || true
            pm2 delete immigration-portal 2>/dev/null || true
            
            # Wait for PM2 to fully clear
            sleep 3
            
            # Use the ecosystem.config.js from the repository
            echo "Starting application with ecosystem.config.js..."
            pm2 start ecosystem.config.js --env production
            
            # Wait for PM2 to start the process
            sleep 5
            
            echo "=== PM2 STATUS ==="
            pm2 status
            
            # Verify the process started
            if ! pm2 list | grep -q "immigration-portal"; then
              echo "ERROR: PM2 failed to start the process!"
              echo "PM2 Logs:"
              pm2 logs immigration-portal --lines 100 --nostream
              echo "Checking Node process:"
              ps aux | grep node || true
              exit 1
            fi
            
            # Wait longer for application startup
            echo "⏳ Waiting for application to initialize..."
            sleep 10
            
            echo "=== HEALTH CHECK ==="
            HEALTH_CHECK_ATTEMPTS=0
            MAX_HEALTH_CHECK_ATTEMPTS=10
            HEALTH_CHECK_INTERVAL=5
            
            while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
              if curl -sf http://localhost:5000/api/health > /dev/null 2>&1; then
                echo "✅ Health check passed!"
                curl -s http://localhost:5000/api/health | head -20
                break
              else
                HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
                if [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; then
                  echo "⏳ Health check attempt $HEALTH_CHECK_ATTEMPTS/$MAX_HEALTH_CHECK_ATTEMPTS failed, retrying in ${HEALTH_CHECK_INTERVAL}s..."
                  sleep $HEALTH_CHECK_INTERVAL
                fi
              fi
            done
            
            if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_HEALTH_CHECK_ATTEMPTS ]; then
              echo "❌ Health check failed after $MAX_HEALTH_CHECK_ATTEMPTS attempts!"
              echo "=== DEBUGGING INFO ==="
              echo "PM2 Status:"
              pm2 status
              echo ""
              echo "PM2 Logs (last 50 lines):"
              pm2 logs immigration-portal --lines 50 --nostream || true
              echo ""
              echo "Node processes:"
              ps aux | grep "node\|npm" | grep -v grep || true
              echo ""
              echo "Port 5000 status:"
              sudo lsof -i :5000 || echo "No process on port 5000"
              echo ""
              echo "Checking dist/server.js exists:"
              ls -la dist/server.js || echo "dist/server.js not found"
              exit 1
            fi
            
            # Save PM2 configuration
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ubuntu --hp /home/ubuntu
            
            echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="
            pm2 status
            
          ENDSSH
          
          # Final verification
          echo "=== FINAL VERIFICATION ==="
          ssh -i private_key.pem -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null ${USER}@${HOST} << 'ENDVERIFY'
            sleep 5
            
            echo "Checking application health..."
            if curl -sf http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "✅ Final health check passed!"
              curl -s http://localhost:5000/api/health
            else
              echo "❌ Final health check failed"
              echo ""
              echo "PM2 Status:"
              pm2 status
              echo ""
              echo "Recent PM2 logs:"
              pm2 logs immigration-portal --lines 30 --nostream
              echo ""
              echo "Nginx status:"
              sudo systemctl status nginx --no-pager | head -20
              exit 1
            fi
            
            echo "🎉 Deployment verification complete!"
          ENDVERIFY
          
          rm -f private_key.pem
          echo "🚀 Deployment finished successfully!"