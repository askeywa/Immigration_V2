name: Deploy to EC2

on:
  push:
    branches: [ master, production ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Backend Build
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            backend/node_modules/.cache
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json', 'backend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      
      - name: Cache Frontend Build
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules/.cache
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json', 'frontend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run Backend Tests
        run: |
          cd backend
          if npm run test --if-present; then
            echo "✅ Backend tests passed"
          else
            echo "⚠️ Backend tests not configured, skipping"
          fi
      
      - name: Run Frontend Tests
        run: |
          cd frontend
          if npm run test --if-present; then
            echo "✅ Frontend tests passed"
          else
            echo "⚠️ Frontend tests not configured, skipping"
          fi
      
      - name: Run Linting
        run: |
          echo "🔍 Running linting checks..."
          
          # Backend linting
          echo "Linting backend..."
          cd backend
          if npm run lint --if-present; then
            echo "✅ Backend linting passed"
          else
            echo "⚠️ Backend linting failed or not configured"
          fi
          
          # Frontend linting
          echo "Linting frontend..."
          cd ../frontend
          if npm run lint --if-present; then
            echo "✅ Frontend linting passed"
          else
            echo "⚠️ Frontend linting failed or not configured"
          fi
          
          echo "🔍 Linting checks completed"
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Production Environment File
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          NODE_ENV: ${{ secrets.NODE_ENV || 'development' }}
          REDIS_CLUSTER_MODE: ${{ secrets.REDIS_CLUSTER_MODE || 'false' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE: ${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED: ${{ secrets.NEW_RELIC_ENABLED }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.ALLOW_START_WITHOUT_DB }}
          ALLOWED_SUPER_ADMIN_DOMAINS: ${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
        run: |
          cat > env.production << 'EOF'
            NODE_ENV=${{ secrets.NODE_ENV || 'development' }}
            PORT=5000
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${{ secrets.SUPER_ADMIN_DOMAIN }}
          ALLOWED_SUPER_ADMIN_DOMAINS=${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
          
          # Database
            MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          
          # Domain Configuration
          MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX=${{ secrets.TENANT_DOMAIN_PREFIX }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Redis
          REDIS_ENABLED=${{ secrets.REDIS_ENABLED }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_CLUSTER_MODE=${{ secrets.REDIS_CLUSTER_MODE || 'false' }}
          
          # Sentry
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE=${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE=${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE=${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          
          # New Relic
            NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
            NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED=${{ secrets.NEW_RELIC_ENABLED }}
          
          # EC2 Configuration
            EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
            EC2_PRIVATE_IP=${{ secrets.EC2_PRIVATE_IP }}
            EC2_PUBLIC_DNS=${{ secrets.EC2_PUBLIC_DNS }}
          
          # API Configuration
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          
          # App Configuration
          APP_NAME=${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB=${{ secrets.ALLOW_START_WITHOUT_DB }}
          EOF
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy environment file FIRST (before deployment)
          echo "Copying environment file..."
          scp -i private_key.pem -o StrictHostKeyChecking=no env.production ${USER}@${HOST}:/tmp/env.production
          
          # Deploy application
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} << 'ENDSSH'
            set -e  # Exit on any error
            
            echo "Cleaning existing deployment..."
            sudo rm -rf /var/www/immigration-portal/*
            sudo rm -rf /var/www/immigration-portal/.git
            sudo rm -rf /var/www/immigration-portal/.[^.]*
            
            echo "Updating repository..."
            cd /var/www/immigration-portal
            git clone https://github.com/askeywa/Immigration_V2.git .
            
            # Move env file to correct location (after git clone)
            mv /tmp/env.production /var/www/immigration-portal/backend/.env
            chmod 600 /var/www/immigration-portal/backend/.env
            
            # Set proper ownership
            sudo chown -R ubuntu:ubuntu /var/www/immigration-portal
            
            echo "Installing backend dependencies..."
            cd /var/www/immigration-portal/backend
            npm install
            
            echo "Installing frontend dependencies..."
            cd /var/www/immigration-portal/frontend
            npm install
            
            echo "Building backend..."
            cd /var/www/immigration-portal/backend
            # Clear build cache to ensure fresh build with latest code
            rm -rf dist/
            rm -rf node_modules/.cache/
            npm run build
            
            echo "Building frontend..."
            cd /var/www/immigration-portal/frontend
            # Clear build cache to ensure fresh build with latest code
            rm -rf dist/
            rm -rf node_modules/.cache/
            rm -rf .vite/
            npm run build
            
            echo "Verifying frontend build..."
            if [ ! -d "dist" ]; then
              echo "ERROR: Frontend dist directory not found!"
              exit 1
            fi
            if [ ! -f "dist/index.html" ]; then
              echo "ERROR: Frontend dist/index.html not found!"
              exit 1
            fi
            echo "Frontend build verification passed!"
            ls -lh dist/assets/ | head -20
            
            echo "Setting up Nginx..."
            sudo apt update
            sudo apt install nginx -y
            
            # Create Nginx configuration for immigration-portal FIRST
            sudo tee /etc/nginx/sites-available/immigration-portal > /dev/null << 'NGINX_EOF'
            server {
                listen 80;
                server_name ibuyscrap.ca www.ibuyscrap.ca;
                
                # Serve frontend static files
                root /var/www/immigration-portal/frontend/dist;
                index index.html;
                
                # Handle frontend routing (SPA)
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                # Proxy API requests to backend
                location /api/ {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            NGINX_EOF
            
            # Enable the site and remove default
            sudo ln -sf /etc/nginx/sites-available/immigration-portal /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test Nginx configuration
            sudo nginx -t
            
            # Start and enable Nginx (after configuration is created)
            sudo systemctl start nginx
            sudo systemctl enable nginx
            sudo systemctl reload nginx
            
            # Configure firewall for web traffic (safer approach)
            sudo ufw allow 22
            sudo ufw allow 80
            sudo ufw allow 443
            sudo ufw --force enable
            
            echo "SSL certificates should be set up manually to avoid rate limits."
            echo "Run this command manually on the server to set up SSL:"
            echo "sudo certbot --nginx -d ibuyscrap.ca -d www.ibuyscrap.ca"
            
            echo "Installing PM2 if needed..."
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            echo "Setting up Redis..."
            if ! command -v redis-server &> /dev/null; then
              sudo apt update
              sudo apt install redis-server redis-tools -y
            fi
            
            # Configure Redis with secure password from secrets
            sudo sed -i 's/^bind .*/bind 127.0.0.1/' /etc/redis/redis.conf
            sudo sed -i "s/^# *requirepass .*/requirepass ${REDIS_PASSWORD}/" /etc/redis/redis.conf
            sudo sed -i "s/^requirepass .*/requirepass ${REDIS_PASSWORD}/" /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory .*/maxmemory 512mb/' /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory-policy .*/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
            
            # Ensure requirepass exists with secure password
            if ! sudo grep -q "^requirepass" /etc/redis/redis.conf; then
              echo "requirepass ${REDIS_PASSWORD}" | sudo tee -a /etc/redis/redis.conf > /dev/null
            fi
            
            # Test Redis config before restarting
            if sudo redis-server /etc/redis/redis.conf --test-memory 1 2>/dev/null; then
              echo "Redis configuration is valid"
            else
              echo "Warning: Redis configuration test failed, but continuing..."
            fi
            
            sudo systemctl restart redis-server
            sudo systemctl enable redis-server
            
            if sudo systemctl is-active --quiet redis-server; then
              echo "Redis started successfully"
            else
              echo "Warning: Redis failed to start"
            fi
            
            echo "Creating logs directory..."
            mkdir -p /var/www/immigration-portal/backend/logs
            
            echo "Checking existing PM2 processes..."
            # Check if immigration-portal is already running
            if pm2 list | grep -q "immigration-portal.*online"; then
              echo "Application is running, will perform restart to ensure environment variables are loaded..."
              DEPLOYMENT_MODE="restart"
            else
              echo "Application not running, will perform fresh start..."
              DEPLOYMENT_MODE="start"
            fi
            
            echo "Verifying build artifacts..."
            cd /var/www/immigration-portal/backend
            
            if [ ! -f "dist/server.js" ]; then
              echo "ERROR: dist/server.js not found!"
              ls -la dist/ || echo "dist directory not found"
              exit 1
            fi
            
            if [ ! -f ".env" ]; then
              echo "ERROR: .env file not found!"
              exit 1
            fi
            
            echo "Deploying application with PM2..."
            if [ -f "ecosystem.config.js" ]; then
              if [ "$DEPLOYMENT_MODE" = "restart" ]; then
                echo "Performing restart with ecosystem.config.js to ensure environment variables are loaded..."
                pm2 restart ecosystem.config.js --env production
              else
                echo "Starting fresh with ecosystem.config.js..."
                pm2 start ecosystem.config.js --env production
              fi
            else
              if [ "$DEPLOYMENT_MODE" = "restart" ]; then
                echo "Performing restart with dist/server.js to ensure environment variables are loaded..."
                pm2 restart dist/server.js --name "immigration-portal" --env production
              else
                echo "Starting fresh with dist/server.js..."
                pm2 start dist/server.js --name "immigration-portal" --env production
              fi
            fi
            
            # Wait for application to start and verify health
            echo "Waiting for application to start..."
            sleep 10
            
            # Fix authentication issues
            echo "🔧 Fixing authentication issues..."
            if [ -f "fix-production-auth-universal.js" ]; then
              echo "Running authentication fix script..."
              node fix-production-auth-universal.js
              if [ $? -eq 0 ]; then
                echo "✅ Authentication fix completed successfully!"
              else
                echo "⚠️ Authentication fix failed, but continuing..."
              fi
            else
              echo "⚠️ Authentication fix script not found, skipping..."
            fi
            
            # Health check with retry logic
            echo "Performing health check..."
            HEALTH_CHECK_ATTEMPTS=0
            MAX_HEALTH_CHECK_ATTEMPTS=6
            
            while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
              if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
                echo "✅ Health check passed!"
                break
              else
                HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
                echo "⏳ Health check attempt $HEALTH_CHECK_ATTEMPTS/$MAX_HEALTH_CHECK_ATTEMPTS failed, retrying in 5 seconds..."
                sleep 5
              fi
            done
            
            if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_HEALTH_CHECK_ATTEMPTS ]; then
              echo "❌ Health check failed after $MAX_HEALTH_CHECK_ATTEMPTS attempts!"
              echo "Checking PM2 status and logs..."
              pm2 status
              pm2 logs immigration-portal --lines 20
              exit 1
            fi
            
            echo "PM2 Status:"
            pm2 status
            
            # Verify PM2 started successfully
            if pm2 list | grep -q "immigration-portal.*online"; then
              echo "Application started successfully!"
            else
              echo "ERROR: Application failed to start"
              echo "PM2 Logs:"
              pm2 logs --lines 50 --nostream
              exit 1
            fi
            
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ubuntu --hp /home/ubuntu
            
            echo "Deployment completed successfully!"
          ENDSSH
          
          # Final verification
          echo "Final health check..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} << 'ENDVERIFY'
            sleep 10
            
            # Check if health endpoint responds
            if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "Application health check passed!"
              curl -s http://localhost:5000/api/health | jq '.' || echo "Health check response received"
            else
              echo "Application health check failed"
              echo "Recent PM2 logs:"
              pm2 logs immigration-portal --lines 20 --nostream
              exit 1
            fi
            
            echo "Deployment verification complete!"
          ENDVERIFY
          
          rm -f private_key.pem
          echo "Deployment finished successfully!"